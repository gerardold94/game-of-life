var search_data = {"index":{"searchIndex":["alive","cell","dead","game","gameboardtest","object","count_neighbors()","draw()","into_range()","is_alive?()","new()","new()","next()","test_cell_alive()","test_cell_has_two_alive_neighbors()","test_cell_has_zero_alive_neighbors()","test_cell_is_dead()","test_cell_is_in_valid_range()","test_cell_is_not_in_valid_range()","test_grid_should_five_rows_and_five_columns()","test_next_generation_is_correct()","to_binary()","readme","rakefile"],"longSearchIndex":["alive","cell","dead","game","gameboardtest","object","game#count_neighbors()","game#draw()","game#into_range()","cell#is_alive?()","cell::new()","game::new()","game#next()","gameboardtest#test_cell_alive()","gameboardtest#test_cell_has_two_alive_neighbors()","gameboardtest#test_cell_has_zero_alive_neighbors()","gameboardtest#test_cell_is_dead()","gameboardtest#test_cell_is_in_valid_range()","gameboardtest#test_cell_is_not_in_valid_range()","gameboardtest#test_grid_should_five_rows_and_five_columns()","gameboardtest#test_next_generation_is_correct()","game#to_binary()","",""],"info":[["Alive","","Alive.html","",""],["Cell","","Cell.html","","<p>Represents a cell, it can be Alive or Dead\n"],["Dead","","Dead.html","",""],["Game","","Game.html","",""],["GameboardTest","","GameboardTest.html","",""],["Object","","Object.html","",""],["count_neighbors","Game","Game.html#method-i-count_neighbors","(row, col)","<p>Count the number of living neighbors of a cell\n<p>Parameters:\n<p>row &mdash; The cell&#39;s row\n"],["draw","Game","Game.html#method-i-draw","()",""],["into_range","Game","Game.html#method-i-into_range","(x, y)","<p>Verify that a cell has a valid position on the board\n<p>Parameters:\n<p>x &mdash; The cell&#39;s row\n"],["is_alive?","Cell","Cell.html#method-i-is_alive-3F","()","<p>Returns:\n<p>A boolean, true if the cell is Alive otherwise returns false\n"],["new","Cell","Cell.html#method-c-new","(state)","<p>Initialize the cell\n<p>Parameters:\n<p>state &mdash; Initial state of the cell (Alive or Dead)\n"],["new","Game","Game.html#method-c-new","(rows, cols, grid=nil)",""],["next","Game","Game.html#method-i-next","()","<p>Creates the next generation of the board\n"],["test_cell_alive","GameboardTest","GameboardTest.html#method-i-test_cell_alive","()",""],["test_cell_has_two_alive_neighbors","GameboardTest","GameboardTest.html#method-i-test_cell_has_two_alive_neighbors","()",""],["test_cell_has_zero_alive_neighbors","GameboardTest","GameboardTest.html#method-i-test_cell_has_zero_alive_neighbors","()",""],["test_cell_is_dead","GameboardTest","GameboardTest.html#method-i-test_cell_is_dead","()",""],["test_cell_is_in_valid_range","GameboardTest","GameboardTest.html#method-i-test_cell_is_in_valid_range","()",""],["test_cell_is_not_in_valid_range","GameboardTest","GameboardTest.html#method-i-test_cell_is_not_in_valid_range","()",""],["test_grid_should_five_rows_and_five_columns","GameboardTest","GameboardTest.html#method-i-test_grid_should_five_rows_and_five_columns","()",""],["test_next_generation_is_correct","GameboardTest","GameboardTest.html#method-i-test_next_generation_is_correct","()",""],["to_binary","Game","Game.html#method-i-to_binary","()","<p>Create a board on a binary basis (0, 1)\n"],["README","","README_md.html","","<p>Game of Life Ruby Implementation\n<p>Run Demo\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">rake</span> <span class=\"ruby-identifier\">start</span>\n</pre>\n"],["Rakefile","","Rakefile.html","","<p>task default: %w\n<p>task :start do\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ruby</span> <span class=\"ruby-string\">&quot;main.rb&quot;</span>\n</pre>\n"]]}}